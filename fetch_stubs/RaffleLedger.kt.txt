import java.text.SimpleDateFormat
import java.util.Locale
import android.util.Log
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
package com.fire.adforge.firebase

import com.google.firebase.firestore.FirebaseFirestore
import java.util.*

object RaffleLedger {
    private val db = FirebaseFirestore.getInstance()

    fun logRaffleEntry(userId: String, raffleName: String, entryCost: Int) {
        val entry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "entryCost" to entryCost,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_entries")
            .add(entry)
            .addOnSuccessListener {     fun getLedger(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_entries")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data     fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
                onResult(entries)
                fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {
                onResult(emptyList())
                fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getLedger(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_entries")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data     fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
                onResult(entries)
                fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {
                onResult(emptyList())
                fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getLedger(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_entries")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data     fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
                onResult(entries)
                fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {
                onResult(emptyList())
                fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getLedger(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_entries")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data     fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
                onResult(entries)
                fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {
                onResult(emptyList())
                fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun logRaffleResult(userId: String, raffleName: String, didWin: Boolean) {
        val resultEntry = hashMapOf(
            "userId" to userId,
            "raffleName" to raffleName,
            "didWin" to didWin,
            "timestamp" to System.currentTimeMillis()
        )

        db.collection("raffle_results")
            .add(resultEntry)
            .addOnSuccessListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
            .addOnFailureListener {     fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
        fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}
    fun getRaffleResults(userId: String, onResult: (List<Map<String, Any>>) -> Unit) {
        db.collection("raffle_results")
            .whereEqualTo("userId", userId)
            .get()
            .addOnSuccessListener { result ->
                val entries = result.documents.mapNotNull { it.data }
                onResult(entries)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }
}


